#--------------------------------------------------#
To Create a VPC:
#--------------------------------------------------#
# aws ec2 create-vpc --cidr-block 10.0.0.0/16


#--------------------------------------------------#
To Create Internet Gateway:
#--------------------------------------------------#
# aws ec2 create-internet-gateway

#--------------------------------------------------#
Attach Internet Gateway with VPC:
#--------------------------------------------------#
# aws ec2 attach-internet-gateway --vpc-id "vpc-0d78505d0709da855" --internet-gateway-id "igw-0656241eb9d87f111" --region us-east-1

#--------------------------------------------------#
To Create Subnet :
#--------------------------------------------------#
# aws ec2 create-subnet --vpc-id "vpc-0d78505d0709da855" --cidr-block 10.0.1.0/24 --availability-zone "us-east-1a"

# aws ec2 create-subnet --vpc-id "vpc-0d78505d0709da855" --cidr-block 10.0.2.0/24 --availability-zone "us-east-1b"


# aws ec2 create-subnet --vpc-id "vpc-0d78505d0709da855" --cidr-block 10.0.3.0/24 --availability-zone "us-east-1a"

# aws ec2 create-subnet --vpc-id "vpc-0d78505d0709da855" --cidr-block 10.0.4.0/24 --availability-zone "us-east-1b"
#--------------------------------------------------#
Create a custom route table for your VPC.
#--------------------------------------------------#

# RouteTable-1 [Public]

# aws ec2 create-route-table --vpc-id vpc-0d78505d0709da855


#--------------------------------------------------#
# RouteTable-2 [Private]
#--------------------------------------------------#

# aws ec2 create-route-table --vpc-id vpc-0d78505d0709da855


#--------------------------------------------------#
Create a route in the route table that points all traffic (0.0.0.0/0) to the Internet gateway.
#--------------------------------------------------#

# aws ec2 create-route --route-table-id "rtb-07d1ffdcfac79a5ec" --destination-cidr-block 0.0.0.0/0 --gateway-id "igw-0656241eb9d87f111"

#--------------------------------------------------#
To check list of subnets part of a specific VPC :
#--------------------------------------------------#

# aws ec2 describe-subnets --filters "Name=vpc-id,Values=vpc-0d78505d0709da855" --query 'Subnets[*].{ID:SubnetId,CIDR:CidrBlock}'

#----------------------------------------------------------#
Subnet Association with RouteTable i.e. Public RouteTable:
#----------------------------------------------------------#

# aws ec2 associate-route-table  --subnet-id "subnet-07363644efa29a6ff" --route-table-id "rtb-07d1ffdcfac79a5ec"
#----------------------------------------------------------#
Subnet Association with RouteTable i.e. Private RouteTable:
#----------------------------------------------------------#

# aws ec2 associate-route-table  --subnet-id "subnet-07f720f68a22a72e3" --route-table-id "rtb-025e00288f84785ab"
#----------------------------------------------------------#
Auto AssignIPV4 Public IP on Subnets :
#----------------------------------------------------------#

# aws ec2 modify-subnet-attribute --subnet-id "subnet-07363644efa29a6ff" --map-public-ip-on-launch

# aws ec2 modify-subnet-attribute --subnet-id "subnet-02e65a332266e0b51" --map-public-ip-on-launch

#----------------------------------------------------------#
Launch an Instance into Your Subnet
#----------------------------------------------------------#
To launch and connect to an instance in your public subnet

Create a key pair and use the --query option and the --output text option to pipe your private key directly into a file with the .pem extension.

# aws ec2 create-key-pair --key-name kk_01 --query 'KeyMaterial' --output text > kk_01.pem

#----------------------------------------------------------#
Create Security Group on Public Subnet :
#----------------------------------------------------------#
Create a security group in your VPC, and add a rule that allows SSH access from anywhere.

# aws ec2 create-security-group --group-name SSH_Access --description "Security group for SSH Access" --vpc-id "vpc-0d78505d0709da855"


Port-22:
# aws ec2 authorize-security-group-ingress --group-id "sg-007c8a12e70b7ff38" --protocol tcp --port 22 --cidr 0.0.0.0/0

Port-80:
# aws ec2 authorize-security-group-ingress --group-id ""sg-007c8a12e70b7ff38"" --protocol tcp --port 80 --cidr 0.0.0.0/0

Port-443:
# aws ec2 authorize-security-group-ingress --group-id ""sg-007c8a12e70b7ff38"" --protocol tcp --port 443 --cidr 0.0.0.0/0
#----------------------------------------------------------#
Creates a network ACL for the specified VPC
#----------------------------------------------------------#
# aws ec2 describe-network-acls

# aws ec2 create-network-acl --vpc-id "vpc-0d78505d0709da855"

#----------------------------------------------------------#
To create a network ACL entry
#----------------------------------------------------------#
The rule allows ingress traffic from any IPv4 address (0.0.0.0/0) on UDP port 53 (DNS) into any associated subnet.

# aws ec2 create-network-acl-entry --network-acl-id "acl-0f60a669a46a348b0" --ingress --rule-number 100 --protocol udp --port-range From=53,To=53 --cidr-block 0.0.0.0/0 --rule-action allow

This example creates a rule for the specified network ACL that allows ingress traffic from any IPv6 address (::/0) on TCP port 80 (HTTP).

# aws ec2 create-network-acl-entry --network-acl-id "acl-0f60a669a46a348b0" --ingress --rule-number 120 --protocol tcp --port-range From=80,To=80 --ipv6-cidr-block ::/0 --rule-action allow

#----------------------------------------------------------#

#----------------------------------------------------------#
Launch an instance into your public subnet, using the security group and key pair you've created.
#----------------------------------------------------------#
# aws ec2 run-instances --image-id ami-6871a115 --count 1 --instance-type t2.micro --key-name kk_01 --security-group-ids "sg-007c8a12e70b7ff38" --subnet-id "subnet-07363644efa29a6ff"



#----------------- Check the Instance Details--------------#
# aws ec2 describe-instances --instance-id "i-05a6db76d8992792f"
#----------------------------------------------------------#

#----------------------------------------------------------#
Do SSH to EC2 instance from Base machine:
#----------------------------------------------------------#

$ ssh -i "kk_01.pem" ec2-user@18.205.155.4

[ec2-user@ip-10-0-1-143 ~]$


#----------------------------------------------------------#
To create an Amazon RDS DB instance
#----------------------------------------------------------#

Create SecurityGroup for RDS:

# aws rds create-db-security-group --db-security-group-name "sg_mydb" --db-security-group-description "My DB Security Group"

The following create-db-instance command launches a new Amazon RDS DB instance:

# aws rds create-db-instance --db-instance-identifier sg-cli-test \
--allocated-storage 20 --db-instance-class db.t2.micro --engine mysql \
--master-username ranasanjeev --master-user-password ranasanjeev




#-------------------------------------------------------------------#
# yum install php php-mysql  http -y
#-------------------------------------------------------------------#
# vi connect.php

<?php
$username = "ranasanjeev";
$password = "ranasanjeev";
$hostname = "sg-cli-test.cfhyk2pjyzql.us-east-1.rds.amazonaws.com:3306";
$dbname = "sg-cli-test";

//connection to the database
$dbhandle = mysql_connect($hostname, $username, $password) or die("Unable to connect to MySQL");
echo "Connected to MySQL using username - $username, password - $password, host - $hostname<br>";
$selected = mysql_select_db("$dbname",$dbhandle)   or die("Unable to connect to MySQL DB - check the database name and try again.");
?>
